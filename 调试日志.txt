日志记录了相对隐藏要插真眼才能搞定的bug,以备查阅

1: 
tcp连续读读大于8k字节的数据会导致发送ack(或其他数据)失败
原因 dm9000.c里的tx_pkt_cnt 一直为2导致发送出的数据会被一直放在netif_tx_queue里面
    
    if (tx_pkt_cnt > 1)
    {
	    tmp = dm9000_reg_read(DM9000_IMR);		//先禁止网卡中断，防止在发送数据时被中断干扰	
        printk("imr: %x\n", tmp);
        return NETDEV_TX_BUSY;
    }

    tx_pkt_cnt++;
	DM_ADD = DM9000_MWCMD;					//存储器读地址自动增加的读数据命令
	for(i=0; i<len; i+=2)					//16 bit mode
	{
		udelay(2);
		DM_CMD = datas[i] | (datas[i+1]<<8);
	}
    if (tx_pkt_cnt == 1)
    {
        dm9000_reg_write(DM9000_TXPLH, (len>>8) & 0x0ff);
        dm9000_reg_write(DM9000_TXPLL, len & 0x0ff);
	    dm9000_reg_write(DM9000_TCR, 0x01);		//发送数据到以太网上
    }
    else
    {
        queue_pkt_len = len;
        netif_stop_queue(ndev);
    }
可能原因: tcp在处理接收数据的时候会检测ack的队列，如果大于的队列的最大值则会在处理函数里发出ack当程序
执行到dm9000_send函数在拷贝数据或写寄存器的时候可能会被时钟中断信号打断,时钟节拍里会调用tcp_timer_entry函数
这个函数会检查ack队列,如果有数据则发送,同样会执行到dm9000_send函数,这时拷贝数据或写寄存器可能就会破坏
之前已经写入的数据
解决方法：在dm9000_send拷贝数据或写寄存器的时候关闭中断,写完之后打开中断.问题没有再出现

2：tcp在连续收大块数据时候会卡死 表现为 free_skb时skb->data_buf为空或非法值或list_del时list为空或非法值等
    
调试方法：添加check_addr 函数 在kfree kmalloc list_del等函数里检查地址合法性,如果不合法则打印错误并调用panic()
卡住然后在keil里查看调用栈即可看到调用关系及参数传递时的值情况.

可能原因：应该和问题1一样属于临界区问题 在中断、多线程中都有可能对struct i_socket的某个变量有操作的地方加上临界
保护(暂时为关中断)之后tcp接收功能已经比较稳定，发送功能同理，稳定性暂时还未调试

3：ubuntu下wireshark抓包显示 tcp会有多个 TCP Dup ACK 包

可能原因：
   1:ack发送的慢导致对方超时重传, tcp收到相同的数据包未丢弃而是同样回得了ack并插了接收队列里,然而发送的慢不
是不发,这就导至最后发了多个同样的ack
   2:确实丢包  tcp检查到丢包之后会连续发送期待的那个包同样是发送多个相同的ack


4: 添加spi驱动框架及complete api 之后发现上层在调用驱动写spi oled 一段时候之后会线程卡死

经调试 实际是在 spi_s3c24xx.c的 s3c24xx_spi_transfer函数里调用了wait_for_completion一直没有被唤醒

调试方法: 
       在keil里在wait_completion(确切的是wait_event里)设置断点,进入到断点之后在keil里查看调用栈,(wait_event是一个宏,不能设置断点,所以要修改这个宏修改为一个函数)
       因为调用wait_event的模块并不多，所以多进几次断点就会发现有test_oled->OLEDPrint->sys_ioctl->oled_ioctl->spi_write->s3c24xx_spi_transfer->wait_for_completion的一个调用栈
       
       spi驱动控制器为中断方式且每一个字节都会产生中断, 在spi driver里记录出总共写的字节数 并且在 spi中断函数里记录产生的中断数,在程序“卡死”之后在keil里查看这两个值
       会发现写的总字节数大于产生中断数并且spi控制器是ready状态,这就说明spi控制器没产生中断或者spi中断丢失
    
       在s3c_24xx_irq.c的 common_irq_handler()函数里记录SRCPND 及 INTPND寄存器中断产生spi中断次数(spi 1 中断在两个寄存器里都在第29位表示， 所以只要 SRCPND & (1 << 29)为1就记录一次:SRCPND_CNT++ INTPND同理) 发现SRCPND产生的spi中断次数比INTPND里多。

       研究s3c2440的中断寄存器手册
       SRCPND: 会记录此刻所有产生中断请求的中断源, 无视优先级 和 中断屏蔽. 即：只要某一中断源产生中断请求,不管它是否在INTMASK中被屏蔽或它的优先级高低,都会在SRCPND中表示出来,并且可以同时表示多个中断源. 假如 外部中断(key) 定时器 adc spi 同时产生了中断,SRCPND会用4位表示.
       INTPND: 会记录 此时产生的 且 没有被屏蔽的 且 优先级最高的 一个 中断

       清中断：SRCPND 会把写入值为1的bit清掉(写入0x80000001 则会把第31位和第0位清0,其他位保持不变) 此特性保证同时发生中断也不会丢中断(同时发生n个中断->cpu处理优先级高的->清掉高优先级标志位->退出中断(同时使能中断)->由于只清掉SRCPND高优先级标识位所以cpu会立即再次产生中断->处理优先级次高的中断->...)

       代码中清中断的方式:
       oft = INTOFFSET;
       SRCPND |= (1 << oft)
       翻译为伪汇编：
       
1:       ldr r0 [INTOFFSET]
2:       ldr r1 [SRCPND] 
3:       orr r1 (1 << r0) 
4:       str r1 [SRCPND]
       如果同时产生了中断或在第2行代码之前又产生了新的中断请求,则SRCPND中会有多位为1, r1中同样也会多位为1,再次把r1写回到SRCPND时会同时清掉多个中断请求,SPI中断就会这样丢失

       代码修改为
       oft = INTOFFSET;
       SRCPND = (1 << oft) 
       之后问题解决
    
       调试代码在 debug/lost_spi_irq目录下面

